classdef TopLevelModule6 < nnet.layer.Layer & nnet.layer.Formattable & ...
        nnet.layer.AutogeneratedFromPyTorch & nnet.layer.Acceleratable
    %TopLevelModule6 Auto-generated custom layer
    % Auto-generated by MATLAB on 19-Mar-2025 08:48:49

    properties (Learnable)
        % Networks (type dlnetwork)

    end

    properties
        % Non-Trainable Parameters




    end

    properties (Learnable)
        % Trainable Parameters

    end

    methods
        function obj = TopLevelModule6(Name, Type, InputNames, OutputNames)
            obj.Name = Name;
            obj.Type = Type;
            obj.NumInputs = 1;
            obj.NumOutputs = 1;
            obj.InputNames = InputNames;
            obj.OutputNames = OutputNames;
        end

        function [relu_3] = predict(obj,relu_argument1_1)

            %Use the input format inferred by the importer to permute the input into reverse-PyTorch dimension order
            [relu_argument1_1, relu_argument1_1_format] = traced_best_rs_model.ops.permuteToReversePyTorch(relu_argument1_1, '', 2);
            [relu_argument1_1] = struct('value', relu_argument1_1, 'rank', int64(2));

            [relu_3] = tracedPyTorchFunction(obj,relu_argument1_1,false,"predict");


            %Permute U-labelled output to forward PyTorch dimension ordering
            if(any(dims(relu_3.value) == 'U'))
                relu_3 = permute(relu_3.value, fliplr(1:max(2,relu_3.rank)));
            end

        end



        function [relu_3] = forward(obj,relu_argument1_1)

            %Use the input format inferred by the importer to permute the input into reverse-PyTorch dimension order
            [relu_argument1_1, relu_argument1_1_format] = traced_best_rs_model.ops.permuteToReversePyTorch(relu_argument1_1, '', 2);
            [relu_argument1_1] = struct('value', relu_argument1_1, 'rank', int64(2));

            [relu_3] = tracedPyTorchFunction(obj,relu_argument1_1,true,"forward");


            %Permute U-labelled output to forward PyTorch dimension ordering
            if(any(dims(relu_3.value) == 'U'))
                relu_3 = permute(relu_3.value, fliplr(1:max(2,relu_3.rank)));
            end

        end



        function [relu_3] = tracedPyTorchFunction(obj,relu_argument1_1,isForward,predict)

            [relu_3.value] = relu(relu_argument1_1.value);
            relu_3.rank = relu_argument1_1.rank;
        end

    end
end

