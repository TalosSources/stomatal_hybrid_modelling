classdef modules_linear_Linear < nnet.layer.Layer & nnet.layer.Formattable & ...
        nnet.layer.AutogeneratedFromPyTorch & nnet.layer.Acceleratable
    %modules_linear_Linear Auto-generated custom layer
    % Auto-generated by MATLAB on 19-Mar-2025 08:48:49

    properties (Learnable)
        % Networks (type dlnetwork)

    end

    properties
        % Non-Trainable Parameters




    end

    properties (Learnable)
        % Trainable Parameters
        Param_bias
        Param_weight
    end

    methods
        function obj = modules_linear_Linear(Name, Type, InputNames, OutputNames)
            obj.Name = Name;
            obj.Type = Type;
            obj.NumInputs = 1;
            obj.NumOutputs = 1;
            obj.InputNames = InputNames;
            obj.OutputNames = OutputNames;
        end

        function [linear_9] = predict(obj,linear_x_1)

            %Validates that the input has the correct format and permutes its dimensions into the reverse of the original PyTorch format.
            traced_best_rs_model.ops.validateInput(linear_x_1,2);
            [linear_x_1, linear_x_1_format] = traced_best_rs_model.ops.permuteInputToReversePyTorch(linear_x_1, 2);
            [linear_x_1] = struct('value', linear_x_1, 'rank', int64(2));

            [linear_9] = tracedPyTorchFunction(obj,linear_x_1,false,"predict");


            %Permute U-labelled output to forward PyTorch dimension ordering
            if(any(dims(linear_9.value) == 'U'))
                linear_9 = permute(linear_9.value, fliplr(1:max(2,linear_9.rank)));
            end

        end



        function [linear_9] = forward(obj,linear_x_1)

            %Validates that the input has the correct format and permutes its dimensions into the reverse of the original PyTorch format.
            traced_best_rs_model.ops.validateInput(linear_x_1,2);
            [linear_x_1, linear_x_1_format] = traced_best_rs_model.ops.permuteInputToReversePyTorch(linear_x_1, 2);
            [linear_x_1] = struct('value', linear_x_1, 'rank', int64(2));

            [linear_9] = tracedPyTorchFunction(obj,linear_x_1,true,"forward");


            %Permute U-labelled output to forward PyTorch dimension ordering
            if(any(dims(linear_9.value) == 'U'))
                linear_9 = permute(linear_9.value, fliplr(1:max(2,linear_9.rank)));
            end

        end



        function [linear_9] = tracedPyTorchFunction(obj,linear_x_1,isForward,predict)

            GetAttr_bias_1 = obj.Param_bias;

            [GetAttr_bias_1] = struct('value', dlarray(GetAttr_bias_1,'UU'), 'rank', 1);

            GetAttr_weight_1 = obj.Param_weight;

            [GetAttr_weight_1] = struct('value', dlarray(GetAttr_weight_1,'UU'), 'rank', 2);

            [linear_9] = traced_best_rs_model.ops.pyLinear(linear_x_1, GetAttr_weight_1, GetAttr_bias_1);
        end

    end
end

